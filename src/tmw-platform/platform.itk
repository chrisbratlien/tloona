# a main application
lappend auto_path ..
package re debug
package require Itk 3.3
package require tile 0.7.5
package require Tclx 8.4

package require tmw::icons 1.0
package require tmw::toolbarframe 1.0
package require tmw::plugin 1.0

package provide tmw::platform 1.0

plugin provide tmw-platform 1.0 {
    # @e menuentry: define or configure menu entries
    extensionpoint menuentry {[Tmw::Platform::instance] menuentry}
    extensionpoint viewleft {[Tmw::Platform::instance] getSite left}
    extensionpoint viewmiddle {[Tmw::Platform::instance] getSite middle}
    extensionpoint viewright {[Tmw::Platform::instance] getSite right}
    extensionpoint viewdownleft {[Tmw::Platform::instance] getSite downleft}
    extensionpoint viewdownright {[Tmw::Platform::instance] getSite downright}
}

# Toolbar options
# See toolbutton.tcl.
option add *Toolbar.relief groove
option add *Toolbar.borderWidth 2
option add *Toolbar.Button.Pad 2
option add *Toolbar.Button.default disabled
option add *Toolbar*takeFocus 0

catch {
    namespace import ::itcl::*
    namespace import ::itk::*
}

namespace eval ::Tmw {
}

itk::usual TFrame {}
itk::usual TButton {}
itk::usual Toolbar {}
itk::usual TLabel {}
itk::usual TProgressbar {}
itk::usual TPanedwindow {}
itk::usual TNotebook {}

# @c The main application Megawidget makes it easy to create main frames. It
# @c contains methods to create menus, toolbars and a status line. The toolbar
# @c functionality is delegated to a Toolbarframe megawidget inside the
# @c interior.
# @c Menu entries can be displayed in the main menu and in a main toolbar
# @c simultaneously, see the [menuentry] method.
# @c The builtin statusline contains a status message label (can be configured
# @c via the -status variable) and a progress indicator that can be displayed
# @c on demand. By default it is hidden.
#
# @component mainframe: The toolbar frame that serves as main frame
# @component statusline: The status line. Contains a status message and a
# @component statusline: progress indicator that can be displayed on demand
class Tmw::Platform {
    inherit itk::Toplevel
    
    itk_option define -width width Width 800 {
        component mainframe configure -width $itk_option(-width)
    }
    itk_option define -height height Height 500 {
        component mainframe configure -height $itk_option(-height)
    }
    
    # @v Instance: This is a singleton instance of this class
    private common Instance ""
    
    constructor {args} {
        set caller [string range [info level [expr [info level] - 1]] end-20 end]
        if {![string match Platform::instance [lindex $caller 0]]} {
            error "Tmw::Platform can not be directly instantiated - use instance"
        }
        itk_component add mainmenu {
            #puts $itk_interior,[component hull]
            ::menu [component hull].mainmenu -tearoff no -relief raised
        } {
            usual
            rename -relief -menurelief menuRelief Relief
            rename -borderwidth -menubd menuBd Borderwidth
        }
        
        if {[catch {itk_initialize -menu [component mainmenu]}]} {
            component hull configure -menu [component mainmenu]
        }
        
        addStatusLine
        addMainframe
        createPanes
        
        toolbar maintoolbar -pos n -compound none
        defaultMenu
        $this configure -menurelief flat -menubd 1 -mainrelief flat -mainbd 3
        wm protocol [namespace tail $this] WM_DELETE_WINDOW \
            [code $this onQuit]
            
        eval itk_initialize $args
    }
    
    public {
        # @v status: status message
        variable status "ready"
        # @v progressincr: the progress increment. Determines how fast the
        # @v progressincr: progress bar moves
        variable progressincr 10
        # @v threadpool: A threadpool to run long running procedures
        variable threadpool ""
        
        # @c Add or modify a menu entries with icon and command.
        # @c The args are the same as to menu entries, two additional
        # @c arguments are provided: -type for the entry type and
        # @c -toolbar for whether to display the entry in the main
        # @c toolbar as well
        #
        # @a name: name of the menu entry
        # @a args: arguments
        method mainmenu {op args}
        
        # @c creates of modifies toolbar buttons. The arguments are
        # @c the same as to ttk::button, with an additional argument
        # @c -toolbar which indicates which toolbar to use. The 
        # @c toolbar component must exist
        method toolbutton {name args} {
            eval component mainframe toolbutton $name $args
        }
        
        # @c create a toolbar or change its style
        method toolbar {name args} {
            eval component mainframe toolbar $name $args
        }
        
        # @c delegate to the inner toolbarframe widget
        method hideToolbar {name} {
            component mainframe tbhide $name
        }
        
        # @c delegate to the inner toolbarframe widget
        method showToolbar {name} {
            component mainframe tbshow $name
        }
        
        # @c shows the progress bar in the status line. This is a
        # @c ttk::progress widget right next to the status information
        # @c in determinate mode (by default). The mode can be configured
        # @c via the -progressmode option
        #
        # @a show: 0 for hide, 1 for show the progress bar. If left empty
        # @a show: (the default), this method returns whether the progress
        # @a show: bar is showing right now
        method showProgress {{show -1}}
        
        # @c callback handler for exiting the application. This
        # @c method is connected to the File.Quit menuentry in
        # @c the default application menu and to the close button
        # @c Clients may override.
        method onQuit {} {
            ::exit
        }
        
        # @c callback handler for default File.New menu entry. Needs
        # @c to be overridden by clients
        method onFileNew {} {}
        # @c callback handler for default File.Open menu entry. Needs
        # @c to be overridden by clients
        method onFileOpen {} {}
        # @c callback handler for default File.Save menu entry. Needs
        # @c to be overridden by clients
        method onFileSave {} {}
        # @c callback handler for default File.Close menu entry. Needs
        # @c to be overridden by clients
        method onFileClose {} {}
        # @c callback handler for default File.Open menu entry. Needs
        # @c to be overridden by clients
        
        # @c callback handler for default Edit.Undo menu entry. Needs
        # @c to be overridden by clients
        method onEditUndo {} {}
        # @c callback handler for default Edit.Redo menu entry. Needs
        # @c to be overridden by clients
        method onEditRedo {} {}
        # @c callback handler for default Edit.Cut menu entry. Needs
        # @c to be overridden by clients
        method onEditCut {} {}
        # @c callback handler for default Edit.Copy menu entry. Needs
        # @c to be overridden by clients
        method onEditCopy {} {}
        # @c callback handler for default Edit.Paste menu entry. Needs
        # @c to be overridden by clients
        method onEditPaste {} {}
        # @c Get child site in the specified place, one of left, middle,
        # @c right, downleft, downright.
        # 
        # @a where: position of child site
        # @a what: command to create a child in this site, e.g. frame, notebook...
        # @a args: optional args to the creation
        method getSite {where args}
        
        # @r the mainframe
        method mainframe {} {
            return [component mainframe component childsite]
        }
    }
    
    protected {
        # @c MToolButton: Holds toolbutton widgets for menu entries
        variable MToolButton
        array set MToolButton {}
        
        # @c creates the default main menu.
        # @c Override in your app, if you need special menu entries
        method defaultMenu {}
    }
    
    private {
        # @c Creates and adds the status line at the bottom of the window
        method addStatusLine {}
        # @c Creates the mainframe to place widgets inside
        method addMainframe {}
        # @c Creates panes inside the mainframe. This is done by 
        # @c ttk::panedwindows which can be arranged differently
        method createPanes {}
        
        # @c Add a menu entry
        # @a name: Name of the entry, which contains its menu path,
        # @a name: e.g. Edit.Cut will create an entry in Edit, named Cut
        # @a type: entry type, command, cascade or separator
        # @a pos: entry position
        # @a toolbar: name of a toolbar where the command should be added as 
        # @a toolbar: well
        # @a args: additional args
        method addMenuEntry {name type pos toolbar args}
        
        # @c Deletes an entry in the main menu
        method deleteMenuEntry {name}
        
        # @c Configures a menu entry
        method configMenuEntry {name args}
    }
    
}

proc ::Tmw::Platform::instance {args} {
    if {$Instance == ""} {
        set Instance [eval ::Tmw::Platform $args]
    }
    return $Instance
}

body ::Tmw::Platform::getSite {where args} {
    set parent [component upperpw]
    switch -- $where {
        downleft -
        downright {
            set parent [component lowerpw]
        }
    }
    if {[winfo exists $parent.$where]} {
        return [component $where]
    }
    itk_component add $where {
        eval ttk::notebook $parent.$where $args
    }
    
    array set chk {left 1 middle 2 right 3 downleft 1 downright 2}
    if {[llength [winfo children $parent]] > $chk($where)} {
        $parent insert [incr chk($where) -1] [component $where]
    } else {
        $parent add [component $where]
    }
    return [component $where]
}

body ::Tmw::Platform::mainmenu {op args} {
    set type ""
    set toolbar ""
    switch -- $op {
        add {
            set type [lindex $args 0]
            set name [lindex $args 1]
            array set aa [lrange $args 2 end]
            catch {unset aa(-label)} ;# The label will be set from the name
            if {[info exists aa(-toolbar)]} {
                set toolbar $aa(-toolbar)
                unset aa(-toolbar)
            }
            set args [array get aa]
            addMenuEntry $name $type end $toolbar {*}$args
            return
        }
        insert {
            set pos [lindex $args 0]
            set type [lindex $args 1]
            set name [lindex $args 2]
            array set aa [lrange $args 3 end]
            catch {unset aa(-label)}
            if {[info exists aa(-toolbar)]} {
                set toolbar $aa(-toolbar)
                unset aa(-toolbar)
            }
            set args [array get aa]
            addMenuEntry $name $type $pos $toolbar {*}$args
        }
        delete {
            deleteMenuEntry $args
        }
        configure {
        }
    }
}

body ::Tmw::Platform::showProgress {{show -1}} {
    set prgShow [lcontain [pack slaves [component statusline]] \
            [component progress]]
    if {$show < 0} {
        return $prgShow
    }
    
    if {$show} {
        if {$prgShow} {
            # progress already showing
            return $prgShow
        }
        
        pack [component progress] -before [component action] \
            -fill x -expand n -side right -padx 3
        [component progress] start $progressincr
    } else {
        if {! $prgShow} {
            # progress already hidden
            return $prgShow
        }
        [component progress] stop
        pack forget [component progress]
    }
    
    return $show
}

body ::Tmw::Platform::defaultMenu {} {
    mainmenu add command File.New -toolbar maintoolbar \
        -image $Tmw::Icons(FileNew) -command [code $this onFileNew] \
        -accelerator Ctrl-n
    mainmenu add command File.Open -toolbar maintoolbar \
        -image $Tmw::Icons(FileOpen) -command [code $this onFileOpen] \
        -accelerator Ctrl-o
    mainmenu add command File.Save -toolbar maintoolbar \
        -image $Tmw::Icons(FileSave) -command [code $this onFileSave] \
        -accelerator Ctrl-s
    mainmenu add command File.Close -toolbar maintoolbar \
        -image $Tmw::Icons(FileClose) -command [code $this onFileClose] \
        -accelerator Ctrl-w
    mainmenu add separator File.Sep0 -toolbar maintoolbar
    mainmenu add command File.Quit -toolbar maintoolbar \
        -image $Tmw::Icons(ActExit) -command [code $this onQuit] \
        -accelerator Ctrl-q
    
    mainmenu add command Edit.Undo -toolbar maintoolbar \
        -image $Tmw::Icons(ActUndo) -command [code $this onEditUndo] \
        -accelerator Ctrl-z
    mainmenu add command Edit.Redo -toolbar maintoolbar \
        -image $Tmw::Icons(ActRedo) -command [code $this onEditRedo] \
        -accelerator Ctrl-r
    mainmenu add separator Edit.Sep0 -toolbar maintoolbar
    mainmenu add command Edit.cut -toolbar maintoolbar \
        -image $Tmw::Icons(EditCut) -command [code $this onEditCut] \
        -accelerator Ctrl-x
    mainmenu add command Edit.Copy -toolbar maintoolbar \
        -image $Tmw::Icons(EditCopy) -command [code $this onEditCopy] \
        -accelerator Ctrl-c
    mainmenu add command Edit.Paste -toolbar maintoolbar \
        -image $Tmw::Icons(EditPaste) -command [code $this onEditPaste] \
        -accelerator Ctrl-v
}

body ::Tmw::Platform::addStatusLine {} {
    # status line
    itk_component add statusline {
        ttk::frame $itk_interior.statusline
    } {
        usual
        rename -relief -statusrelief statusRelief Relief
        rename -borderwidth -statusbd statusBd Borderwidth
        rename -height -statusheight statusHeight Height
    }
    
    configure -statusrelief flat -statusbd 0 -statusheight 20
    
    itk_component add action {
        ttk::label [component statusline].action \
            -textvariable [scope status]
    }
    
    itk_component add progress {
        ttk::progressbar [component statusline].progress
    } {
        usual
        rename -mode -progressmode progressMode Mode
        rename -length -progresslength progressLength Length
    }
    set sep1 [ttk::separator [component statusline].s1 \
        -orient vertical]
    
    pack [component action] -fill x -expand n -side right -padx 3
    pack $sep1 -fill y -expand n -side right -padx 5 -pady 2
    configure -progressmode determinate -progresslength 40
    pack [component statusline] -side bottom -expand no -fill x
    # end status line
}


body ::Tmw::Platform::addMainframe {} {
    
    itk_component add mainframe {
        Tmw::toolbarframe $itk_interior.mainframe
    } {
        usual
        rename -relief -mainrelief mainRelief Relief
        rename -borderwidth -mainbd mainBd Borderwidth
    }
    
    configure -mainrelief flat -mainbd 1
    pack [component mainframe] -expand yes -fill both
}

# @c creates the pane parts in the main window
body ::Tmw::Platform::createPanes {} {
    set mainpw [::ttk::panedwindow [mainframe].mainpw -orient vertical]
    
    itk_component add upperpw {
        ::ttk::panedwindow $mainpw.upperpw -orient horizontal
    }
    itk_component add lowerpw {
        ::ttk::panedwindow $mainpw.lowerpw -orient horizontal
    }
    
    $mainpw add [component upperpw] -weight 1
    $mainpw add [component lowerpw] -weight 1
    pack $mainpw -expand yes -fill both
}

body ::Tmw::Platform::addMenuEntry {name type pos toolbar args} {
    # Step through all dotted components except the last one and
    # create cascades if they don't exist
    set casc [component mainmenu]
    foreach {cc} [lrange [split $name .] 0 end-1] {
        set pcasc $casc
        append casc .[string tolower $cc]
        if {[winfo exists $casc]} {
            continue
        }
        menu $casc -tearoff no
        $pcasc insert $pos cascade -menu $casc -label $cc
        set pos end
    }
    
    # Here we have the menu for the entry to be added
    if {![string match $type separator]} {
        # set some arguments if not present
        if {[lcontain $args -image] && ![lcontain $args -compound]} {
            lappend args -compound left
        }
        lappend args -label [lindex [split $name .] end]
    }
    $casc insert $pos $type {*}$args
    
    # If this is just a cascade, we are done here
    if {[string match $type cascade]} {
        return
    }
    
    # Create a toolbar entry if requested
    set toolButton ""
    set toolMenu ""
    if {$toolbar != ""} {
        if {[set i [lsearch $args -label]] != -1} {
            lset args $i -text
        }
        if {[set i [lsearch $args -accelerator]] >= 0} {
            set args [lreplace $args $i [incr i]]
        }
        # the position where the button should go
        component mainframe toolbutton $name -type $type -position $pos \
            -toolbar $toolbar {*}$args
        set MToolButton($name) $toolbar
    }
    
    array set aargs $args
    if {[info exists aargs(-command)] && [info exists aargs(-accelerator)]} {
        set accel $aargs(-accelerator)
        set accel [regsub {Ctrl} $accel Control]
        set accel [regsub {Meta} $accel M1]
        bind [namespace tail $this] <[set accel]> $aargs(-command)
    }
}

body ::Tmw::Platform::deleteMenuEntry {name} {
    set mname [lindex [split $name . ] end]
    set path [string tolower $name]
    set parent [join [lrange [split $path .] 0 end-1] .]
    set M [component mainmenu]
    for {set i 0} {$i < [$M.$parent index end]} {incr i} {
        switch -- [$M.$parent type $i] {
        command {
            set enam [$M.$parent entrycget $i -label]
            if {[string match $enam $mname]} {
                $M.$parent delete $i
                if {[info exists MToolButton($name)]} {
                    component mainframe toolbutton $name \
                        -toolbar $MToolButton($name) delete
                }
                break
            }
        }
        separator {
        }
        cascade {
        }
        }
    }    
}

body ::Tmw::Platform::configMenuEntry {name args} {
}


proc ::Tmw::mainapp {path args} {
    uplevel 0 ::Tmw::Platform::instance $path $args
}

Tmw::Platform::instance .m
